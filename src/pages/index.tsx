import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Main.module.css';

import Accordion from '@/components/UI/Accordion';
import CommissionStatus from '@/components/UI/CommissionStatus';
import { useState, useEffect, useCallback } from 'react';
import _ from 'lodash';
import { Button, Input, Switch, cn } from '@nextui-org/react';
import { useAtom } from 'jotai';
import { authAtom } from '@/data/atoms/authAtom';
import Link from 'next/link';

export default function Home() {
  // TYPES
  interface CommissionDataConfig {
    statusOpen?: boolean;
    activeSlots?: number;
    totalSlots?: number;
  }

  // STATES
  const [commissionData, setCommissionData] = useState<CommissionDataConfig>({
    statusOpen: false,
    activeSlots: 0,
    totalSlots: 0,
  });
  const [commissionFormState, setCommissionFormState] =
    useState<CommissionDataConfig>(commissionData);
  const [keyedInput, setKeyedInput] = useState('');
  const [auth, setAuth] = useAtom(authAtom);
  console.log('auth: ', auth);
  const [isAdmin, setIsAdmin] = useState<boolean>(false);

  useEffect(() => {
    if (auth.isLoggedIn) {
      setIsAdmin(true);
    } else {
      setIsAdmin(false);
    }
  }, [auth.isLoggedIn]);

  // FUNCTIONS
  const handleKeyPress = useCallback(
    (event: any) => {
      // Add the pressed key to the existing keyedInput
      const newInput = keyedInput + event.key;

      // Check if the last 5 characters match 'amary'
      if (newInput.slice(-5).toLowerCase() === 'amary') {
        setIsAdmin(true);
      }

      setKeyedInput(newInput);
    },
    [keyedInput]
  );

  const updateCommissionData = async (newData: CommissionDataConfig) => {
    try {
      const response = await fetch('api/commissions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      try {
        const updatedData = await response.json();
        setCommissionData(updatedData);
      } catch (error) {
        console.error('No JSON response:', error);
      }
    } catch (error) {
      console.error('Error while updating commission data', error);
    }
  };

  const handleInputChange = (event: any) => {
    // destructure object with relevant properties
    const { name, value, type } = event.target;
    console.log('input value: ', value);

    let newValue: boolean | number;
    if (type === 'number') {
      // Parse the value to an integer. If it's NaN, default to 0
      newValue = isNaN(parseInt(value, 10)) ? 0 : parseInt(value, 10);
    } else if (type === 'checkbox') {
      console.log('type is checkbox', value);
      newValue = value;
    } else {
      newValue = event.target.value;
    }

    console.log('handleInputChange', name, newValue, type);

    setCommissionFormState((prevState) => {
      return { ...prevState, [name]: newValue };
    });
  };

  // EFFECTS
  useEffect(() => {
    window.addEventListener('keypress', handleKeyPress);

    // Cleanup the event listener
    return () => {
      window.removeEventListener('keypress', handleKeyPress);
    };
  }, [handleKeyPress]);

  useEffect(() => {
    const getCommissionData = async () => {
      try {
        const res = await fetch('api/commissions');
        const data: CommissionDataConfig = await res.json();
        // console.log('response', data);
        setCommissionData(data);
        setCommissionFormState(data);
        console.log('commissionData: ', data);
      } catch (error) {
        console.error('there was an error fetching the data', error);
      }
    };
    getCommissionData();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    console.log('FORM STATE: ', commissionFormState);
    const debouncedUpdate = _.debounce(() => {
      updateCommissionData(commissionFormState);
    }, 1000);

    if (commissionFormState !== commissionData) {
      console.log(
        'POST commission data: ',
        commissionFormState,
        commissionData
      );
      debouncedUpdate();
    }

    return () => debouncedUpdate.cancel();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [commissionFormState]);

  return (
    <>
      <Head>
        <title>Commissions</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <div className='relative overflow-hidden p-4 min-h-screen'>
          <div className='h-28 w-full mt-4 -mb-3 outline-1 outline-red-900 relative invert'>
            <Image src={'svg/commissions svg for app.svg'} alt='logo' fill />
          </div>
          <CommissionStatus commissionData={commissionFormState} />
          {/* Commission Data Form */}
          {isAdmin && (
            <form className='space-y-4'>
              <div className='flex flex-col'>
                <Switch
                  type='checkbox'
                  name='statusOpen'
                  checked={commissionFormState?.statusOpen}
                  color='success'
                  onChange={(e) =>
                    handleInputChange({
                      target: {
                        name: 'statusOpen',
                        value: e.target.checked, // The value will be true or false depending on whether the checkbox is checked or not
                        type: 'checkbox',
                      },
                    })
                  }
                >
                  Status: {commissionFormState.statusOpen ? 'Open' : 'Closed'}
                </Switch>
              </div>
              <div className='flex flex-row'>
                <label className='text-sm font-medium mr-4 text-gray-700'>
                  <Input
                    type='number'
                    label='Active Slots'
                    name='activeSlots'
                    value={commissionFormState.activeSlots?.toString()}
                    min='0'
                    size='lg'
                    onChange={handleInputChange}
                  />
                </label>
                <label className='text-sm font-medium text-gray-700'>
                  <Input
                    type='number'
                    label='Total Slots:'
                    name='totalSlots'
                    value={commissionFormState.totalSlots?.toString()}
                    min='0'
                    size='lg'
                    onChange={handleInputChange}
                  />
                </label>
              </div>
            </form>
          )}

          <Accordion />
          <div
            className='absolute bottom-0 right-0
           pr-3 pb-2 text-gray-500'
          >
            {auth.isLoggedIn ? (
              <Button
                onClick={() => {
                  setAuth({ isLoggedIn: false, user: null });
                }}
              >
                Log Out
              </Button>
            ) : (
              <Link href='/login' className='text-gray-400'>
                admin
              </Link>
            )}
          </div>

          <div className='absolute -bottom-20 -left-20 h-96 w-80 overflow-hidden '>
            <Image
              src={'svg/ABSTRACT AMARY(5).svg'}
              alt='Amary Logo'
              fill
              className='object-contain'
            />
          </div>
        </div>
      </main>
    </>
  );
}
